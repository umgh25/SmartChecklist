import { Request, Response, RequestHandler } from 'express';
import axios from 'axios';
import dotenv from 'dotenv';

dotenv.config();
if (!process.env.HF_API_KEY) {
  throw new Error('La cl√© API Hugging Face est manquante');
}

const HF_API_URL = 'https://api-inference.huggingface.co/models/mistralai/Mixtral-8x7B-Instruct-v0.1';

const systemPrompt = `Tu es un assistant sp√©cialis√© dans la cr√©ation de checklists techniques en fran√ßais.
Tu dois ABSOLUMENT r√©pondre en fran√ßais et uniquement sur le sujet demand√©.

Ta t√¢che est de g√©n√©rer une checklist √©tape par √©tape technique et pr√©cise.
Format de r√©ponse STRICT √† suivre :
1. Chaque √©tape doit √™tre une instruction technique pr√©cise
2. Chaque √©tape DOIT commencer par un verbe d'action √† l'infinitif en fran√ßais (ex: Cr√©er, Configurer, Impl√©menter...)
3. Les √©tapes doivent suivre une progression logique de d√©veloppement
4. Les √©tapes doivent √™tre sp√©cifiques au d√©veloppement React
5. Retourne UNIQUEMENT la liste des √©tapes num√©rot√©es
6. Chaque √©tape doit √™tre sur une nouvelle ligne

Exemple pour une fonctionnalit√© React :
1. Cr√©er un nouveau composant React
2. Importer les d√©pendances n√©cessaires
3. D√©finir la structure du composant
4. Impl√©menter la logique m√©tier
5. Ajouter les styles CSS

IMPORTANT : 
- R√©pondre UNIQUEMENT en fran√ßais
- Rester STRICTEMENT dans le contexte du d√©veloppement React
- Ne donner QUE des √©tapes techniques et pr√©cises
- Ne JAMAIS inclure de texte autre que les √©tapes num√©rot√©es`;


interface HFResponse {
  generated_text: string;
}

export const generateChecklist: RequestHandler = async (req, res) => {
  try {
    console.log('üîµ Requ√™te re√ßue sur /api/checklists/generate');
    const { prompt } = req.body;

    if (!prompt) {
      console.error('‚ùå Erreur: prompt manquant');
      res.status(400).json({ error: 'prompt requise' });
      return;
    }

    console.log('G√©n√©ration de checklist pour:', prompt);

    const response = await axios.post(HF_API_URL, 
      {
        inputs: `${systemPrompt}\n\nUtilisateur: J'ai besoin d'une checklist d√©taill√©e en fran√ßais pour : ${prompt}\n\nAssistant: Voici les √©tapes √† suivre :\n`,
        parameters: {
          max_new_tokens: 1000,
          temperature: 0.7,
          top_p: 0.95,
          return_full_text: false,
        }
      },
      {
        headers: {
          Authorization: `Bearer ${process.env.HF_API_KEY}`,
          'Content-Type': 'application/json',
        }
      }
    );
    
    console.log('‚úÖ Checklist g√©n√©r√©e');
    const data = response.data;
    console.log('üìÑ R√©ponse brute de HF:', data);

    // Traitement de la r√©ponse
    let generatedText = '';
    if (Array.isArray(data)) {
      generatedText = data[0].generated_text || '';
    } else if (typeof data === 'object') {
      generatedText = data.generated_text || JSON.stringify(data);
    } else {
      generatedText = String(data);
    }

    console.log('üìÑ Checklist g√©n√©r√©e:', generatedText);

    // Extreraire les √©tapes de la checklist
        // Extraction des √©tapes
        const lines = generatedText
        .split('\n')
        .map(line => line.trim())
        .filter(line => 
          line.length > 0 && 
          !line.toLowerCase().includes('voici') && 
          !line.toLowerCase().includes('checklist') &&
          line.match(/^\d+\./) && // V√©rifie que la ligne commence par un num√©ro
          /^[1-9][0-9]*\.\s*(Cr√©er|Configurer|Ajouter|Impl√©menter|D√©finir|Modifier|Tester|V√©rifier|Installer|Int√©grer)/i.test(line) // V√©rifie que la ligne commence par un verbe d'action en fran√ßais
        );
  
      console.log('üìã Lignes extraites:', lines);

      if (lines.length === 0 || lines.some(line =>  /\b(spotify|playlist|song|music|vampire)\b/i.test(line))) {
        console.error('‚ùå Aucune √©tape trouv√©e');
        throw new Error('La r√©ponse g√©n√©r√© n\'est pas une checklist valide');
      }

      const items = lines.map ((text, index) => ({
        id: `step-${index + 1}`,
        text: text.replace(/^\d+\.\s*/, ''), // Supprime le num√©ro de l'√©tape
        completed: false

      }));

      console.log('‚úÖ Items format√©s:', items);
      res.json({ items });

  } catch (error) {
    console.error('‚ùå Erreur d√©taill√©e:', error);
    res.status(500).json({ 
      error: 'Une erreur est survenue lors de la g√©n√©ration de la checklist',
      detais: error instanceof Error ? error.message : 'Erreur inconnue'
    });
  }
}